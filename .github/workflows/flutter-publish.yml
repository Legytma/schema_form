name: Flutter CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: 'Setup Java'
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: 'Setup flutter'
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      - name: 'Install dependencies'
        run: flutter pub get

#      - name: 'Execute Build Runner'
#        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: 'Build example'
        run: flutter build aot --target=example/lib/main.dart

      - name: 'Flutter test coverage'
        run: flutter test --coverage test

      - name: 'Coverage'
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}} # not required for public repos
          file: ./coverage/lcov.info

      - name: 'Dart and Flutter Analizer'
        uses: axel-op/dart-package-analyzer@v2
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Dart and Flutter Package Publisher'
        shell: bash
        env:
          INPUT_CREDENTIALJSON: ${{ secrets.CREDENTIAL_JSON }}
          INPUT_ACCESSTOKEN: ${{ secrets.OAUTH_ACCESS_TOKEN }}
          INPUT_REFRESHTOKEN: ${{ secrets.OAUTH_REFRESH_TOKEN }}
          INPUT_TOKEN_ENDPOINT: ${{ secrets.PUB_DEV_PUBLISH_TOKEN_ENDPOINT }}
          INPUT_EXPIRATION: ${{ secrets.PUB_DEV_PUBLISH_EXPIRATION }}
          INPUT_SKIPTESTS: "true"
        run: |
          #!/bin/bash
          
          set -e
          
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          
          check_required_inputs() {
            echo "Check inputs..."
            if [ -z "$INPUT_CREDENTIALJSON" ]; then
              echo "Missing credentialJson, trying tokens"
              if [ -z "$INPUT_ACCESSTOKEN" ]; then
                echo "Missing accessToken"
                exit 1
              fi
              if [ -z "$INPUT_REFRESHTOKEN" ]; then
                echo "Missing refreshToken"
                exit 1
              fi
            fi
            echo "OK"
          }
          
          switch_working_directory() {
            echo "Switching work directory"
            if [ -z "$INPUT_RELATIVEPATH" ]; then
              :
            else
              echo "Switching to package directory '$INPUT_RELATIVEPATH'"
              cd "$INPUT_RELATIVEPATH"
            fi
            echo "Package dir: $PWD"
          }
          
          detect_flutter_package() {
            echo "Detecting flutter package"
            GET_OUTPUT=`pub get`
            if [ "$?" = 69 ]; then
              INPUT_FLUTTER="true"
              echo "Flutter package detected"
            elif [ "$?" = 1 ]; then
              INPUT_FLUTTER="true"
              echo "Flutter package detected"
            else
              echo "Dart package detected"
            fi
          }
          
          get_local_package_version() {
            echo "Getting local package version"
            if [ "$INPUT_FLUTTER" = "true" ]; then
              GET_OUTPUT=`flutter pub get`
              DEPS_OUTPUT=`flutter pub deps`
            else
              GET_OUTPUT=`pub get`
              DEPS_OUTPUT=`pub deps`
            fi
            PACKAGE_INFO=`echo "$DEPS_OUTPUT" | cut -d'|' -f1 | cut -d"'" -f1 | sed '/^\s*$/d'`
            IFS=$'\n\r' read -d '' -r -a lines <<< "$PACKAGE_INFO"
            lastIndex=`expr ${#lines[@]}-1`
            echo "$PACKAGE_INFO"
            DART_VERSION=`echo "$PACKAGE_INFO" | perl -n -e'/^Dart SDK (.*)$/ && print $1'`
            FLUTTER_VERSION=`echo "$PACKAGE_INFO" | perl -n -e'/^Flutter SDK (.*)$/ && print $1'`
            PACKAGE_INFO="${lines[$lastIndex]}"
            PACKAGE=`echo "$PACKAGE_INFO" | cut -d' ' -f1`
            LOCAL_PACKAGE_VERSION=`echo "$PACKAGE_INFO" | cut -d' ' -f2`
            if [ -z "$PACKAGE" ]; then
              echo "No package found. :("
              exit 0
            fi
            echo "::set-output name=dartVersion::$DART_VERSION"
            if [ "$FLUTTER_VERSION" != "" ]; then
              echo "::set-output name=flutterVersion::$FLUTTER_VERSION"
            fi
            echo "::set-output name=package::$PACKAGE"
            echo "::set-output name=localVersion::$LOCAL_PACKAGE_VERSION"
          }
          
          run_unit_tests() {
              echo "Running unit tests"
              if [ "$INPUT_SKIPTESTS" = "true" ]; then
                echo "Skip unit tests set to true, skip unit testing."
              else
                HAS_BUILD_RUNNER=`echo "$DEPS_OUTPUT" | perl -n -e'/^.* build_runner (.*)/ && print $1'`
                HAS_BUILD_TEST=`echo "$DEPS_OUTPUT" | perl -n -e'/^.* build_test (.*)/ && print $1'`
                HAS_TEST=`echo "$DEPS_OUTPUT" | perl -n -e'/^.* (test|flutter_test) (.*)/ && print $2'`
                if [ "$HAS_BUILD_RUNNER" != "" ] && [ "$HAS_BUILD_TEST" != "" ] && [ "$INPUT_SUPPRESSBUILDRUNNER" != "true" ]; then
                  if [ "$INPUT_FLUTTER" = "true" ]; then
                    echo "flutter tests with build_runner"
                    flutter pub run build_runner build --delete-conflicting-outputs
                    flutter test
                  else
                    pub run build_runner test --delete-conflicting-outputs
                  fi
                else
                  if [ "$HAS_TEST" != "" ]; then
                    if [ "$INPUT_FLUTTER" = "true" ]; then
                      flutter test
                    else
                      pub run test
                    fi
                  else
                    echo "No unit test related dependencies detected, skip unit testing."
                  fi
                fi
              fi
          }
          
          get_remote_package_version() {
            echo "Getting remote package version"
            if [ "$INPUT_FLUTTER" = "true" ]; then
              ACTIVATE_OUTPUT=`flutter pub global activate $PACKAGE $LOCAL_PACKAGE_VERSION`
            else
              ACTIVATE_OUTPUT=`pub global activate $PACKAGE $LOCAL_PACKAGE_VERSION`
            fi
            if [ "$?" = 69 ]; then
              if [ "$INPUT_FLUTTER" = "true" ]; then
                ACTIVATE_OUTPUT=`flutter pub global activate $PACKAGE`
              else
                ACTIVATE_OUTPUT=`pub global activate $PACKAGE`
              fi
            fi
            REMOTE_PACKAGE_VERSION=`echo "$ACTIVATE_OUTPUT" | perl -n -e'/^Activated .* (.*)\./ && print $1'`
            if [ -z "$REMOTE_PACKAGE_VERSION" ]; then
              REMOTE_PACKAGE_VERSION="âœ—"
            fi
            echo "Local version: [$LOCAL_PACKAGE_VERSION]"
            echo "Remote version: [$REMOTE_PACKAGE_VERSION]"
            echo "::set-output name=remoteVersion::$REMOTE_PACKAGE_VERSION"
          }
          
          publish() {
            echo "Publishing package"
            if [ "$LOCAL_PACKAGE_VERSION" = "$REMOTE_PACKAGE_VERSION" ]; then
              echo "Remote & Local versions are equal, skip publishing."
            else
              mkdir -p ~/.pub-cache
              if [ -z "$INPUT_CREDENTIALJSON" ]; then
                cat <<-EOF > ~/.pub-cache/credentials.json
          {
            "accessToken":"$INPUT_ACCESSTOKEN",
            "refreshToken":"$INPUT_REFRESHTOKEN",
            "tokenEndpoint":"$INPUT_TOKEN_ENDPOINT",
            "scopes": [ "openid", "https://www.googleapis.com/auth/userinfo.email" ],
            "expiration": $INPUT_EXPIRATION
          }
          EOF
              else
                echo "$INPUT_CREDENTIALJSON" > ~/.pub-cache/credentials.json
              fi
              if [ "$INPUT_FLUTTER" = "true" ]; then
                flutter packages pub publish --dry-run
              else
                pub lish --dry-run
              fi
              if [ $? -eq 0 ]; then
                echo "Dry Run Successfull."
              else
                echo "Dry Run Failed, skip real publishing."
                exit 0
              fi
              if [ "$INPUT_DRYRUNONLY" = "true" ]; then
                echo "Dry run only, skip publishing."
              else
                if [ "$INPUT_FLUTTER" = "true" ]; then
                  flutter packages pub publish -f -v
                else
                  pub lish -f
                fi
                if [ $? -eq 0 ]; then
                  echo "::set-output name=success::true"
                else
                  echo "::set-output name=success::false"
                fi
              fi
            fi
          }
          
          check_required_inputs
          switch_working_directory
          detect_flutter_package || true
          get_local_package_version || true
          run_unit_tests
          get_remote_package_version || true
          publish || true
